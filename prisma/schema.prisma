// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Flag {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
}

enum AccountType {
  CHECKING
  CASH
  CREDIT_CARD
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String        @unique
  clerkId      String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  payees       Payee[]
  categories   Category[]
  accounts     Account[]
}

model Transaction {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  date       DateTime
  cents      Int
  memo       String
  cleared    Boolean
  flag       Flag
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  String
  payee      Payee    @relation(fields: [payeeId], references: [id])
  payeeId    String
}

model Category {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  allocated    Int
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  // categoryGroup CategoryGroup @relation(fields: [categoryGroupId], references: [id])
  // categoryGroupId String?
  transactions Transaction[]

  @@unique(name: "categoryId", fields: [userId, name])
}

model Account {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  type         AccountType
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  transactions Transaction[]

  @@unique(name: "accountId", fields: [userId, name])
}

model Payee {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  User         User          @relation(fields: [userId], references: [id])
  userId       String
  transactions Transaction[]

  @@unique(name: "payeeId", fields: [userId, name])
}

// model CategoryGroup {
//   id         String     @id @default(cuid())
//   createdAt  DateTime   @default(now())
//   updatedAt  DateTime   @updatedAt
//   name       String
//   categories Category[]
// }
